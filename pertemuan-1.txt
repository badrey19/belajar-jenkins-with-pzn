--SEBELUM AUTOMATION SERVER--

# Dalam pengembangan perangkat lunak, koding hanyalah tahapan awal saja
# Setelah koding, masih banyak yang biasanya dilakukan oleh pengembang perangkat lunak sebelum aplikasi yang dibauat sampai ke production server
# Sebelum adanya Automation Server, biasanya semuanya dilakukan secara manual, namun resikonya adalah sering terjadi kesalahan dan tidak konsisten 
# Contoh menjalankan unit test, download depedency aplikasi, setup database, membuat distribusi aplikasi dan lain-lain
# Hal-hal sangat kompleks jika harus dilakukan secara manual terus menerus 

-- PENGENALAN AUTOMATION SERVER --

# Automation Server adalah aplikasi yang bisa digunakan untuk melakukan otomatisasi perintah yang kita instruksikan
# ada banyak sekali keuntungan yang kita dapatkan jika menggunakan Autoation Server dibanding manual dalam tahapan pengembangan perangkat lunak
# Automation Server mempercepat proses, karena kita tidak perlu menunggu di Laptop kita 
# Automation Server bisa berjalan konsisten, di laptop programmer mungkin perangkat lunak bisa berbeda - berbeda
# Autoation Server bisa berjalan secara otomatis, bisa memberitahu kita ketika terjadi kesalahan dan lain-lain.

== CONTOH AUTOMATION SERVER ==
jenkins, jetbrains, gitlab ci/cd, github action, atlassian bamboo, circle ci, travis ci dll


$$ PENGENALAN JENKINS $$

-- Jenkins adalah Open Source Automation Server yang paling populer saat ini 
-- Sebelum Jenkins, awalnya project ini bernama Hudson
-- Hudson dibuat menggunakan Java, dan pengembang inti dari Hudson kebanyakan bekerja di Sun Microsystem (pemilik Java)
-- Tahun 2011, terjadi sengketa setelah pembelian Sun Microsystem oleh Oracle, dan karena baru bernama Jenkins dari source code Hudson
-- Hudson sendiri akhirnya didonasikan ke Eclipse Foundation tahun 2012 dan akhirnya pengembangannya berhenti tahun 2017 
-- https://jenkins.io

== JENKINS PLUGIN ==
- Jenkins sendiri merupakan sebuah platform untuk Automation Server
- Kebanyakan fitur jenkins sendiri tersedia dalam bentuk plugin, bahkan kita bisa membuat plugin sendiri jika kita mau 
- https://plugins.jenkins.io

== INSTALL JENKINS ==
## HARDWARE REQUIREMENTS ##
$min = 256 MB of RAM, 1 GB of DRIVE SPACE
$recomend = 4 GB+ of RAM, 50 GB+ of DRIVE SPACE 
## SOFTWARE REQUIREMENTS ##
-- SSH
-- JAVA 11 http://jdk.java.net/archive/
-- GIT https://git-scm.com/
-- WEB BROWSER

== SISTEM OPERASI LINUX ==
- menggunakan linux sebagai sistem operasi yang menjalankan jenkins nya 
- kebanyakan perusahaan biasanya menggunakan linux sebagai sistem operasi untuk jenkins 
- tapi kita tetap bisa menggunakan sistem operasi apapun jika mau karena jenkins bisa berjalan di semua sistem operasi

== SETUP VIRTUAL MACHINE ==
-- akan setup dari awal menggunakan Virtual MAchine 
-- bisa menggunakan VPS di penyedia layanan hosting atau mengguanakn Virtual Machine Manager seperti Virtual Box di laptop atau langsung menggunakan laptop sendiri jika menggunakan sistem operasi linux

== SETUP SSH ==
-- pastikan setup SSH terlebih dahulu di Laptop atau VM yang kita gunakan 
-- gunakan perintah ssh-keygen

== INSTALL SOFTWARE REQUIREMENTS == 
-- Install Java 11
-- Install git

 == INSTALL JENKINS ==
 -- Download War File Jenkins di https://www.jenkins.io/download/
 -- Jalankan Jenkins menggunakan perintah : 
    java -jar jenkins.war --httpPort=xxx
-- java -jar jenkins.war --httpPort=9090

== JENKINS DATA ==

- Jenkins tidak membutuhkan database untuk menyimpan seluruh konfigurasi dan datanya
- Jenkins akan secara otomatis membuat folder jenkins di home directory sistem operasi kita 
- Di folder tersebut lah jenkins akan menyimpan seluruh datanya 
- Jika kita menghapus folder jenkins, secara otomatis kita akan menghapus seluruh data Jenkins 

== MEMBUAT JOB ==
- Job adalah panggilan untuk tugas Automation di Jenkins
- Saat kita menginstall Jenkins tidak ada satupun Job sama sekali 
- Kita bisa membuat Job di Jenkins menggunakan web jenkins 

GIT PLUGIN

secara default, jenkins tidak tahu bagaimana cara mengambil kode program yang terdapat di Git
kita perlu menginstall Git Plugin terlebih dahulu
setelah menginstall git plugin, secara otomatis kita bisa menambahkan sumber kode dari git repository di job yang sudah dibuat

SETUP SSH di Github

sebagai git repository untuk menyimpan contoh project kita
oleh karena itu, kita perlu melakukan setup github terlebih dahulu, agar jenkins bisa mengambil kode program di github
tambahkan ssh public key di vm jenkins ke github
di jenkins server lakukan perintah cat ~/.ssh/id_rsa.pub
kemudian copy dan paste di github>setting>ssh>new ssh key> paste

CREDENTIALS

saat kita melakukan koneksi ke git, biasanya kita perlu credential SSH
jenkins sendiri menggunakan bawaan dari sistem operasi nya, namun hal ini tidak disarankan
hal ini karena kedepannya kita perlu setup beberapa server untuk Jenkins, kemungkinan credential SSH nya bisa berbeda
Oleh karena itu, ada baiknya semua informasi credential disimpan di jenkins
jenkins sendiri memiliki fitur bernama Credentials dimana kita bisa menyimpan credential, salah satunya credential untuk SSH
tambah credential di jenkins
di vm server jenkins > cat .ssh/id_rsa> copy>paste di credential jenkins>manage jenkins>manage credentials>jenkins>global>+ add credential> pilih ssh username and private key

INTEGRASI DENGAN GIT

setelah kita setup git dengan github, dan juga menambahkan credential ssh ke jenkins, sekarang kita bisa mulai integrasi jenkins dengan git di github
namun sebelumnya yang perlu kita lakukan adalah, pastikan memiliki project di github yang bisa digunakan sebagai sumber kode untuk jenkins job yang sudah kita buat

KONFIGURASI GIT DI JOB

BUILD STEP

source code management menggunakan git hanyalah awal dari tahapan job, biasanya job itu akan menjalankan perintah-perintah yang diperlukan atau dalam jenkins dinamakan build step
di jenkins, kita bisa melakukan konfigurasi job untuk menambahkan buildstep yang kita mau, bisa lebih dari satu


MENAMBAH BUILD STEP
configure>build>Execute shell>command>./mvnw clean eecute shell> ./mvnw compile test-compile > execute shell>./mvnw test
bisa lebih dari satu > save > build now
gagalkan build step, salahkan, ./mvnw clean> tambah> ./mvnw salah
jadi pada build step bisa menentukan, mungkin nanti ada syntax yang akan dieksekusi secara urut, maka mengaturnya pada build step, seperti mungkin install database dahulu atau mendownload kebutuhan aplikasi yang lain


BUILD HISTORY
Jenkins menyimpan seluruh riwayat yang kita lakukan, baik itu sukses atau gagal
hal ini memungkinkan kita bisa melihat hasil build kita yang lama, sehingga bisa mempermudah kita ketika proses debugging
selain itu jenkins juga memiliki fitru trend di mana bisa memperlihatkan statistic build history kita


POST BUILD ACTION
jenkins memiliki fitur bernama post build action
fitur ini biasanya digunakan untuk memberitahu status sebuah job ketika proses build selesai
misal setelah sebuah job selesai, kita ingin mengirim statusnya ke email, chat atau yang lainnya
contohnya misal kita ingin mengirim status job ke slack, salah satu platform untuk chat yang lumayan populer di dunia kerja

SLACK NOTIFICATION PLUGIN
jika saat install terjadi error 403 karena ada proteksi csrf, tak mengirimkan ip addr client secara tidak benar
solusinya aktifkan csrf protection > manage jenkins > config global > csrf protect > check list enable proxy com..

SETUP SLACK JENKINS INTEGRATION
buka https://my.slack.com/services/new/jenkins-ci
buat channel baru > integration with jenkins ci

SETUP JENKINS SLACK CREDENTIAL
secret text>paste>

SETUP JENKINS SLACK CONFIGURATION
slack>credential>channel


KONFIGURASI POST BUILD ACTION

COPY JOB
saat membuat job, kadang banyak sekali konfigurasi yang sama antara job yang satu dengan job yang lain, misal build step sama atau Post-Build Action yang sama
jenkis memiliki fitur yang bisa digunakan untuk membuat job baru dengan cara copy dari job yang sudah ada

CARA COPY JOB
ada pada saat pembuatan job baru, ada opsinya copy from


SCHEDULED JOB
secara default job di jenkins hanya akan berjalan jika kita melakukan trigger build secara manual
kadang ada kasus di mana ingin menjalankan jenkins job dengan scheduled yang pasti, misal tiap jam 12 malam atau bahkan tiap jam, tiap menit, dan sebagainya
contoh kasus misal ingin menjalankan backup database tiap jam 12 malam misalnya

BUILD PERIODICALLY
untuk membuat scheduled job kita cukup tambahkan informasi scheduled dalam bentuk waktu cron pada bagian build periodically
secara otomatis jenkins akan menjalankan job tersebut sesuai dengan scheduled cron
https://crontab.guru

TAMPILAN BUILD TRIGGERS
build periodically>schedule>******

POLL SCM(source code management
saat menggunakan scheduled job menggunakan Cron, job akan selalu dieksekusi ketika sudah waktunya sesuai dengan waktu cron
kadang ada kasus di mana kita ingin membuat scheduled job, namun hanya ingin menjalankan job ketika terjadi perubahan di source code saja
pada kasus ini kita bisa menggunakan Poll SCM
Poll SCM mirip dengan scheduled job namun hanya akan menjalankan job nya ketika terjadi perubahan di sourc code jika tidak ada perubahan maka job tidak akan dijalankan
poll scm cocok digunakan untuk misal build test dll berkaitan dengan hal yang belum pasti, tapi seperti yang sudah pasti backup database dll, itu menggunakan cronjob

DISABLED JOB
saat tidak butuh job lagi, ada dua hal yang bisa dilakukan
menghapus job, artinya job dan semua konfigurasi akan hilang secara permanen atau
men-disabled job artinya job tidak aktif namun konfigurasi dan job tetap ada, dan bisa mengaktifkan nya lagi jika mau
untuk mendisabled pergi ke configure job, disable job
saat di disabled tombol build now hilang

JENKINS ENVIRONMENT VARIABLE
saat kita menggunnakan build step berupa execute shell atau batch jenkins secara otomatis akan menambahkan environment variable yang berisikan informasi dari job dan jenkins nya itu sendiri
kadang pada beberapa kasus, sering butuh informasi dari jenkins dan job nya
kita bisa lihat semua env variable yang tersedia di jenkins di halaman JENKINS_URL/env-vars.html/
untuk menggunakan env variable di shell atau batch kita bisa gunakan tanda ${NAMA_ENV_VAR}

CONTOH MENGGUNAKAN ENV VARIABLE
build>execute shell>command> echo "Execute Job ${JOB_NAME}:${BUILD_BUMBER}";

GLOBAL ENVIRONMENT VARIABLE
selain menggunakan environment variable yang disediakan oleh jenkins, kita juga bisa menambahkan environment variable tambahan ke jenkins
environment variable yang kita tambahkan secara otomatis akan teregistrasi secara global dan bisa digunakan di semua job
fitur ini sangat cocok ketika kita butuh data konfigurasi yang bisa diubah-ubah tanpa harus mengubah build step job yang kita buat
untuk menambahkan environment variable kita bisa menggunakan menu manage jenkins>configure system>global properties>environment variable

BUILD PARAMETER
saat membuat job kadang ada kasus di mana kita ingin meminta input data dari user sebelum menjalankan job tersebut
misal ketika kita ingin menjalankan job untuk deploy aplikasi, kita bisa meminta input dari user ingin dideploy ke mana misalnya
jenkins memiliki fitur build parameter, di mana kita bisa meminta input data dari user sebelum menjalankan jobnya
terdapat banyak sekali input data seperti boolean, string, choice, secret dan lain-lain
semua input data yang diberikan oleh user secara otomatis bisa kita ambil seperti environment variable di build step

MENAMBAH BUILD PARAMETER
pada configure job ada opsi this project is parameterized yang bisa dicentang

MENGGUNAKAN BUILD PARAMETER
pada configure job>Build>execute shell>command>./mvnw ${SCRIPT}

DISCARD OLD BUILDS
jenkins menyimpan semua history build di folder .jenkins di HOME directory
secara default .jenkins akan menyimpan semua history job selamanya, hal ini tidak baik terutama jika sampai kita lupa maka server jenkins bisa kehabisan ruang penyimpanan
jenkins memiliki fitur penghapusan riwayat build yang lama secara otomatis, baik itu menggunakan hari atau jumlah build
ketika kita menambahkan aturan ini, secara otomatis jenkins akan melakukan pengecekan ketika selesai menjalankan job

TAMPILAN DISCARD OLD BUILDS
pergi ke configure>discard old build>

BUILD EXECUTOR
jenkins menjalankan semua job dalam executor
secara default jenkins memiliki 2 executor yang digunakan untuk menjalankan job
saat semua executor sedang sibuk, maka job yang akan dijalankan harus menunggu terlebih dahulu sampai executor ada yang tidak sibuk
kita bisa mengubah jumlah executor dari menu manage jenkins>configure jenkins># of executor
harap bijak menentukanjumlah executor, karena semakin banyak proses job yang berjalan setara paralel, semaikn banyak pula resource CPU dan memori yang akan dibutuhkan

USER MANAGEMENT
saat pertama kita menginstall jenkins, kita telah membuat user untuk login ke web jenkins
jika kita ingin menambah user baru, kita bisa menggunakan menu manage jenkins>manage users> create user

ANONYMOUS READ ONLY
secara default hanya user yang sudah login yang bisa melihat semua job di jenkins
pada kasus misal kita menggunakan jenkins untuk project open source ada baiknya membolehkan akses untuk read only ke guest user
kita bisa mengaktifkan fitur ini di menu manage jenkins>configure global security>authorization>logged in>allow anonymous read access

ROLE BASED AUTHORIZATION STRATEGY
secara default saat kita membuat user di jenkins, user tersebut bisa melakukan apapun layaknya admin user
kadang kita ingin membatasi akses untuk user, sayangnya secara default di jenkins kita tidak bisa melaukan ini
namun terdapat plugin role based authorization strategy yang bisa kita gunakan dalam kasus ini
https://plugins.jenkins.io/role-strategy/

MENGUBAH AUTHORIZATION
rolebased strategy
manage and assign role> manage role>

USER MANAGMENT LAINNYA
https://plugins.jenkins.io/saml/
https://plugins.jenkins.io/google-login/
https://plugins.jenkins.io/gitlab-oauth/
https://plugins.jenkins.io/github-oauth/
dan lainlain https://plugins.jenkins.io/ui/search/?labels=user

TRIGGER BUILD REMOTELY
jenkins memiliki fitur di mana kita bisa meminta jenkins untuk menjalankan job secara remote
remote dalam artinya tanpa harus membuka web jenkins
fitur ini cocok sekali ketika misal kita membuat bot, sehingga bot tersebut bisa memerintah jenkins untuk menjalankan job yang kita pinta
saat kita menggunakan fitur ini, kita perlu menggunakan authentication token yaitu token yang perlu kta gunakan ketika kita akan menjalankan job secara remote

TAMPILAN TRIGGER BUILD REMOTELY
build triggers>trigger build remotely>auth token

VIEW
saat job banyak, kadang kita ingin membuat grup yang berisikan kumpulan job tertentu di jenkins fitur ini disebut view
kita bisa membuat view dari menu + yang terdapat di halaman dashboard, lalu bisa memilih job mana yang ingin kita tambahkan ke view tersebut

NODES
saat kita menggunakan jenkins rekomendesinya sebenarnya tidak menjalankan jenkins single node, apalagi jika jobnya sudah sangat banyak
jenkins mendukung nodes atau agent di mana kita bisa menambahkan node jenkins lainnya sehingga bisa digunakan untuk menjalankan job
dengan menambahkan node jenkins, kita tidak perlu melakukan setup job secara manual satu persatu semua di node jnkins karena secara otomatis jenkins akan mendistribusikan eksekusi job nya ke semua node
untuk menambah node baru kita bisa menggunakan menu manage jenkins>manage nodes and clouds>new node

SSH BUILD AGENT
saat kita menambah node terdapat banyak pilihan untuk terkoneksi dari node master ke node agent
salah satu yang aman adalah menggunakan SSH, namun secara default pluginnya tidak terinstall
jadi kita perlu menginstall plugin SSH build agent
https://plugins.jenkins.io/ssh-slaves/

INSTALL SSH BUILD AGENT

INSTALL VM BARU
sebelum menambah node silahkan install vm baru dan jangan lupa untuk menginstall software requirement yang dibutuhkan, git dan java 11

MENAMBAH NODE BARU
new node > node name > permanent agent

SETTING SSH AGENT
launch method>host>credential>host key verif

MATERI SELANJUTNYA 
jenkins pipeline
jenkins docker
jenkins github
jenkins gitlab
jenkins bitbucket
jenkins kubernetes


